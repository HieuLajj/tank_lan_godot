[gd_scene load_steps=8 format=2]

[ext_resource path="res://Font-chu-dep/Font-chu-dep/BreeSerif.otf" type="DynamicFontData" id=1]
[ext_resource path="res://Simple_prompt.gd" type="Script" id=2]

[sub_resource type="Theme" id=3]

[sub_resource type="DynamicFont" id=2]
size = 20
font_data = ExtResource( 1 )

[sub_resource type="Shader" id=4]
code = "/* 
Rainbow outline by @Farfalk and @ThePadDev, July 2021

Apply to canvas items with transparent backgrounds.
Check that there is sufficient transparent background space for the outline!

CC0 License (but citation is welcome <3)
*/

shader_type canvas_item;

uniform float line_thickness : hint_range(0, 20) = 1.0;    // thickness of the line
uniform float sin_frequency : hint_range(0.1, 2.0) = 0.5;  // frequency of the rainbow
uniform float sin_offset : hint_range(0.0, 360.0) = 0.0;   // offset of the rainbow, useful to differentiate objects using the same shader
uniform float light_offset : hint_range(0.0, 1.0) = 0.5;   // this offsets all color channels; if set to 0 only red green and blue colors will be shown.

void fragment() {
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	
	float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	outline = min(outline, 1.0);
	
	vec4 animated_line_color = vec4(light_offset + sin(2.0*3.14*sin_frequency*TIME),
							   light_offset + sin(2.0*3.14*sin_frequency*TIME + radians(120.0)),
							   light_offset + sin(2.0*3.14*sin_frequency*TIME + radians(240.0)),
							   1.0);
	
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, animated_line_color, outline - color.a);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/line_thickness = 1.0
shader_param/sin_frequency = 0.5
shader_param/sin_offset = 0.0
shader_param/light_offset = 0.5

[sub_resource type="DynamicFont" id=1]
size = 39
outline_color = Color( 0.564706, 0.0901961, 0.0901961, 0 )
font_data = ExtResource( 1 )

[node name="Simple_prompt" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="."]
modulate = Color( 0.298039, 1, 1, 0.988235 )
self_modulate = Color( 0.972549, 1, 0.992157, 1 )
anchor_left = 0.158
anchor_top = 0.187
anchor_right = 0.845
anchor_bottom = 0.841
margin_left = -1.12
margin_top = 0.159996
margin_right = -0.800049
margin_bottom = -0.119995
theme = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="."]
margin_left = 107.0
margin_top = 105.0
margin_right = 534.0
margin_bottom = 140.0
custom_colors/font_color = Color( 0.917647, 0.627451, 0.121569, 1 )
custom_colors/font_outline_modulate = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0.945098, 0.909804, 0.909804, 1 )
custom_fonts/font = SubResource( 2 )
text = "Simple prompt"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Can" type="CanvasLayer" parent="."]
layer = 3

[node name="Ok" type="Button" parent="Can"]
modulate = Color( 0.992157, 0.992157, 0.992157, 1 )
material = SubResource( 5 )
anchor_left = 0.373
anchor_top = 0.547
anchor_right = 0.622
anchor_bottom = 0.731
margin_left = 0.279984
margin_top = -0.0400085
margin_right = -0.0800171
margin_bottom = 0.0800018
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_fonts/font = SubResource( 1 )
text = "Yes"
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="Can/Ok" to="." method="_on_Ok_pressed"]
